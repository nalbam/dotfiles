alias t='toast'
alias tu='pip install -U toast-cli'
alias tt='bash -c "$(curl -fsSL nalbam.github.io/dotfiles/run.sh)"'

c() {
  local dir="$(toast cdw $@)"
  if [ -n "$dir" ]; then
    echo "Change directory to $dir"
    cd "$dir"
  fi
}

alias m='toast am'
alias x='toast ctx'
alias d='toast dot'
alias e='toast env'
alias g='toast git'
alias r='toast region'

alias a='aws'
alias k='kubectl'
alias h='helm'

alias cc='claude'
alias ccu='ccusage'

alias av='aws-vault'
alias ave='export AWS_VAULT= && aws-vault exec'
alias ava='export AWS_VAULT= && aws-vault exec daangn-alpha --'
alias avd='export AWS_VAULT= && aws-vault exec daangn-data --'
alias avp='export AWS_VAULT= && aws-vault exec daangn-prod --'
alias avn='export AWS_VAULT= && aws-vault exec nalbam --'
alias avt='export AWS_VAULT= && aws-vault exec nalbam-two --'
alias avk='export AWS_VAULT= && aws-vault exec awskrug-team --'
alias avo='export AWS_VAULT= && aws-vault exec opspresso --'
alias avb='export AWS_VAULT= && aws-vault exec bruce --'
alias avc='aws-vault clear'

alias tf='terraform'
alias tfc='rm -rf .terraform .terraform.lock.hcl'
alias tff='toast am && tf init && tf fmt'
alias tfp='toast am && tf init && tf fmt && tf plan'
alias tfa='toast am && tf init && tf fmt && tf apply'
alias tfd='toast am && tf init && tf destroy'
alias tfs='toast am && tf init && tf state'
alias tfg='toast am && tf init && tf graph'
alias tfo='toast am && tf init && tf output'

alias tfcp='tfc && tfp'
alias tfca='tfc && tfa'

alias tfat='tfa -target'

alias tfim='tf init && tf import'

alias tfsl='tf init && tf state list'
alias tfss='tf init && tf state show'
alias tfsr='tf init && tf state rm'

alias tfdoc="terraform-docs markdown"

alias slsd="toast am && sls deploy"

alias amp="amplify"

nn() {
  if [ -f "pnpm-lock.yaml" ]; then
    echo "Found pnpm-lock.yaml, cleaning and reinstalling with pnpm..."
    rm -rf node_modules pnpm-lock.yaml .next && pnpm install
  elif [ -f "package-lock.json" ]; then
    echo "Found package-lock.json, cleaning and reinstalling with npm..."
    rm -rf node_modules package-lock.json && npm install
  else
    echo "No lock file found, installing with npm..."
    npm install
  fi
}
nb() {
  if [ -f "pnpm-lock.yaml" ]; then
    pnpm build
  elif [ -f "package-lock.json" ]; then
    npm run build
  else
    npm run build
  fi
}
nd() {
  lsof -ti:3000 | xargs -r kill
  lsof -ti:3001 | xargs -r kill
  if [ -f "pnpm-lock.yaml" ]; then
    pnpm dev
  elif [ -f "package-lock.json" ]; then
    npm run dev
  else
    npm run dev
  fi
}

alias py='python'
alias py3='python3'

alias dff='colordiff'

alias http-docs='python3 -m http.server 8000 --directory docs > /dev/null 2>&1 & disown && echo "Serving docs at http://localhost:8000"'
alias kill-8000='lsof -ti:8000 | xargs -r kill && echo "Killed process on port 8000" || echo "No process on port 8000"'
alias kill-3000='lsof -ti:3000 | xargs -r kill && echo "Killed process on port 3000" || echo "No process on port 3000"'

alias p='reveal-md -w --port 8888 --theme night'

alias dt='date -u +"%Y-%m-%dT%H:%M:%SZ"'

alias ll='ls -l'
alias l='ls -al'

alias xs='cd'
alias vf='cd'

alias ㅊ='c'
alias ㅊㅇ='cd'
