#!/bin/bash

# Toast CLI shortcuts
alias t='toast'
alias tu='pip install -U toast-cli'
alias tt='bash -c "$(curl -fsSL nalbam.github.io/dotfiles/run.sh)"'

# Change directory with toast cdw
c() {
  local dir="$(toast cdw $@)"
  if [ -n "$dir" ]; then
    echo "Change directory to $dir"
    cd "$dir"
  fi
}

# Shortcuts for toast commands
alias m='toast am'
alias x='toast ctx'
alias d='toast dot'
alias e='toast env'
alias g='toast git'
alias r='toast region'

alias a='aws'
alias k='kubectl'
alias h='helm'

# Claude CLI shortcuts
alias cc='claude'
alias ccu='ccusage'

# AWS Vault helper function
av() {
  # AWS Vault helper
  if [ -z "$1" ]; then
    echo "Usage: av <profile|command> [args...]"
    echo "Profiles:"
    echo "  a|alpha    - daangn-alpha"
    echo "  d|data     - daangn-data"
    echo "  p|prod     - daangn-prod"
    echo "  n|nalbam   - nalbam"
    echo "  t|two      - nalbam-two"
    echo "  k|krug     - awskrug-team"
    echo "  o|ops      - opspresso"
    echo "  b|bruce    - bruce"
    echo "Commands:"
    echo "  c|clear    - clear credentials"
    echo "  l|list     - list profiles"
    echo "  s|status   - show current status"
    return 1
  fi

  case "$1" in
    a|alpha)  export AWS_VAULT= && aws-vault exec daangn-alpha -- ${@:2} ;;
    d|data)   export AWS_VAULT= && aws-vault exec daangn-data -- ${@:2} ;;
    p|prod)   export AWS_VAULT= && aws-vault exec daangn-prod -- ${@:2} ;;
    n|nalbam) export AWS_VAULT= && aws-vault exec nalbam -- ${@:2} ;;
    t|two)    export AWS_VAULT= && aws-vault exec nalbam-two -- ${@:2} ;;
    k|krug)   export AWS_VAULT= && aws-vault exec awskrug-team -- ${@:2} ;;
    o|ops)    export AWS_VAULT= && aws-vault exec opspresso -- ${@:2} ;;
    b|bruce)  export AWS_VAULT= && aws-vault exec bruce -- ${@:2} ;;
    c|clear)  aws-vault clear ;;
    l|list)   aws-vault list ;;
    s|status) aws-vault list | grep -E "^Profile|^=|Session" ;;
    *)        export AWS_VAULT= && aws-vault exec "$@" ;;
  esac
}

# Keep backward compatibility aliases
alias ava='av alpha'
alias avd='av data'
alias avp='av prod'
alias avn='av nalbam'
alias avc='av clear'

# Terraform
alias tf='terraform'
alias tfc='rm -rf .terraform .terraform.lock.hcl'
alias tff='toast am && tf init && tf fmt'
alias tfp='toast am && tf init && tf fmt && tf plan'
alias tfa='toast am && tf init && tf fmt && tf apply'
alias tfd='toast am && tf init && tf destroy'
alias tfs='toast am && tf init && tf state'
alias tfg='toast am && tf init && tf graph'
alias tfo='toast am && tf init && tf output'

alias tfcp='tfc && tfp'
alias tfca='tfc && tfa'

alias tfat='tfa -target'

alias tfim='tf init && tf import'

alias tfsl='tf init && tf state list'
alias tfss='tf init && tf state show'
alias tfsr='tf init && tf state rm'

# Terraform docs
alias tfdoc="terraform-docs markdown"

# Serverless
alias slsd="toast am && sls deploy"

# Amplify
alias amp="amplify"

# Node.js / JavaScript / TypeScript
nn() {
  if [ -f "pnpm-lock.yaml" ]; then
    echo "Found pnpm-lock.yaml, cleaning and reinstalling with pnpm..."
    rm -rf node_modules pnpm-lock.yaml .next && pnpm install
  elif [ -f "package-lock.json" ]; then
    echo "Found package-lock.json, cleaning and reinstalling with npm..."
    rm -rf node_modules package-lock.json && npm install
  else
    echo "No lock file found, installing with npm..."
    npm install
  fi
}
nb() {
  if [ -f "pnpm-lock.yaml" ]; then
    pnpm build
  elif [ -f "package-lock.json" ]; then
    npm run build
  else
    npm run build
  fi
}
nd() {
  kl
  if [ -f "pnpm-lock.yaml" ]; then
    pnpm dev
  elif [ -f "package-lock.json" ]; then
    npm run dev
  else
    npm run dev
  fi
}

# Python
alias py='python'
alias py3='python3'

# Python package management
alias pip='pip3'
alias pipi='pip install'
alias pipu='pip install --upgrade'
alias pipr='pip install -r requirements.txt'
alias pipf='pip freeze > requirements.txt'
alias pipl='pip list'

# Color diff
alias dff='colordiff'

# Local development servers
ds() {
  # Doc server - serve any directory with Python http.server
  local dir="${1:-docs}"
  local port="${2:-8000}"

  # Kill existing process on the port if any
  lsof -ti:$port > /dev/null 2>&1 && lsof -ti:$port | xargs -r kill

  # Resolve absolute path
  local abs_dir=$(cd "$dir" 2>/dev/null && pwd)
  if [ -z "$abs_dir" ]; then
    echo "Directory '$dir' not found"
    return 1
  fi

  python3 -m http.server $port --directory "$abs_dir" > /dev/null 2>&1 & disown
  echo "Serving $abs_dir at http://localhost:$port"
}
kl() {
  # Kill all local dev servers
  local ports=$(lsof -i -P -n | grep LISTEN | grep -E ':(300[0-9]|400[0-9]|500[0-9]|800[0-9]|808[0-9]|900[0-9])\s' | awk '{print $2}' | sort -u)
  if [ -n "$ports" ]; then
    echo "Killing local servers..."
    echo "$ports" | while read pid; do
      local port=$(lsof -p $pid -i -P -n | grep LISTEN | awk -F: '{print $2}' | awk '{print $1}' | head -1)
      kill $pid 2>/dev/null && echo "  Killed PID $pid (port $port)"
    done
  else
    echo "No local servers found"
  fi
}
kp() {
  # Kill specific port
  if [ -z "$1" ]; then
    echo "Usage: kp <port>"
    return 1
  fi
  if lsof -ti:$1 > /dev/null 2>&1; then
    lsof -ti:$1 | xargs -r kill && echo "Killed process on port $1"
  else
    echo "No process found on port $1"
  fi
}

# Markdown preview
alias p='reveal-md -w --port 8888 --theme night'

# Date in UTC ISO 8601 format
alias dt='date -u +"%Y-%m-%dT%H:%M:%SZ"'

# Commonly used ls aliases
alias ll='ls -l'
alias l='ls -al'

alias xs='cd'
alias vf='cd'

alias ㅊ='c'
alias ㅊㅇ='cd'
